#!/usr/bin/env node

var fs = require('fs');
var MBR = require('mbr');

var executableName = process.argv[1].split('/').pop();

var printUsageAndExit = function () {
	console.error('Usage:');
	console.error('Wifi:');
	console.error('   ', executableName, 'get <image> > network.config ');
	console.error('    cat network.config |', executableName, 'set <image>');
	console.error('');
	console.error('Ethernet:');
	console.error('   ', executableName, 'get_ethernet <image> > ethernet.config ');
	console.error('    cat ethernet.config |', executableName, 'set_ethernet <image>');
	process.exit(1);
}

var action = process.argv[2];
if (['get', 'set', 'get_ethernet', 'set_ethernet'].indexOf(action) === -1) {
	printUsageAndExit();
}

var imagePath = process.argv[3]

if (!imagePath) {
	printUsageAndExit();
}

if (!fs.existsSync(imagePath)) {
	console.error('Image', imagePath, 'does not exist');
	process.exit(1);
}

var BLOCK_SIZE = 512;
var CONFIG_SIZE = 1 * 1024 * 1024;

var mbr = new MBR();

var fd = fs.openSync(imagePath, 'r+');

console.error('Parsing image MBR');
mbrBuf = new Buffer(BLOCK_SIZE);
fs.readSync(fd, mbrBuf, 0, BLOCK_SIZE, 0);
mbr.parse(mbrBuf);

ebrOffset = mbr.partitions[3].firstLBA * BLOCK_SIZE;
fs.readSync(fd, mbrBuf, 0, BLOCK_SIZE, ebrOffset);
mbr.parse(mbrBuf);

var configBuf = new Buffer(CONFIG_SIZE);
var configOffset = ebrOffset + mbr.partitions[0].firstLBA * BLOCK_SIZE;

console.error('Reading existing config');
fs.readSync(fd, configBuf, 0, CONFIG_SIZE, configOffset);
for (var configEnd = 0; configBuf[configEnd] != 0; configEnd++) {}

var config = JSON.parse(configBuf.slice(0, configEnd));

CONF_PATH = 'network/network.config';

if (action === 'get_ethernet' || action === 'set_ethernet') {
	CONF_PATH = 'network/ethernet.config';
}

switch (action) {
	case 'get':
	case 'get_ethernet':
		if (config.files && config.files[CONF_PATH]) {
			process.stdout.write(config.files[CONF_PATH]);
		}
		break;
	case 'set':
	case 'set_ethernet':
		configBuf.fill(0);
		console.error('Reading new config from stdin..');
		fs.readSync(0, configBuf, 0, CONFIG_SIZE, null);
		for (var configEnd = 0; configBuf[configEnd] != 0; configEnd++) {}
		
		if (!config.files) {
			config.files = {}
		}

		config.files[CONF_PATH] = configBuf.slice(0, configEnd) + '';

		configBuf.fill(0);
		configBuf.write(JSON.stringify(config))

		console.error('Writing config to image');
		fs.writeSync(fd, configBuf, 0, CONFIG_SIZE, configOffset);
		break;
}

console.error('Done')
